<?php
/*  변수를 선언할 때는 변수의 이름 앞에 달러($) 기호를 사용
    변수의 타입은 대입되는 값에 따라서 자동으로 결정된다.
    [형식] $변수이름 = 초깃값;  */
$num = 10; // 정수값을 대입
$num2 = 3.14; // 실수값을 대입
$num3 = "PHP"; // 문자열을 대입

/*  변수를 선언하는 이유 ?
    값을 저장하는 공간을 확보하겠다는 이야기다
    정확히는 컴퓨터가 가진 메모리를 사용하겠다고 미리 컴퓨터에게 말하는 것이다.
    컴퓨터에 메모리(저장하는 공강)가 부족하다고 프로그램이 실행이 안 되는 이유는 이렇게도 설명이 가능하다.  */

/*  변수의 종류
    1. 지역 변수 : 함수 내부에서 선언된 변수는 오직 함수 내부에서만 접근 가능, 함수 내부에서 선언된 변수는 함수의 호출이 종료되면 메모리에서 제거됨

    2. 전역 변수 : 함수 밖에서 선언된 변수는 함수 밖에서만 바로 접근 가능, 함수 밖에서 선언된 변수를 함수 내부에서 접근하고자 할 때는 global 키워드를 함께 사용 해야함

    3. 정적 변수 : 함수 내부에서 선언된 정적 변수는 호출이 종료되더라도 메모리상에서 사라지지 않음, 지역 변수처럼 내부에서만 접근 가능  */

// PHP에서 공백 표현 echo "\n";

/*  PHP 데이터 타입
1. 불리언(boolean) : 참(true)과 거짓(false)을 표현 *PHP에선 boolean은 상수인 true와 false를 사용해 나타내며, 대소문자를 구분하지 않음
    *** var_dump() 는 데이터의 타입을 반환

2. 정수(integer)

3. 실수(float)

4. 문자열(string) : 문자열 리터럴은 큰따옴표("")나 작은따옴표('')로 감싸서 표현
    *** strlen() 함수는 인수로 전달받은 문자열의 길이를 반환하는 함수

5. 배열(array) : 한 쌍의 키(key)와 값(value)으로 이루어진 맵(map)으로 구성되는 순서가 있는 집합을 의미
                맵의 키값으로는 정수와 문자열만이 가능하며, 하나의 배열에 두 가지 키값을 같이 사용할 수 있음
                배열의 index 값은 0부터 시작

$array1 = [0,1,2]; // 배열 초기화
echo "배열 0번째 자리의 값 : {$array1[0]}"; // 배열 호출

6. NULL : 오직 한 가지 값(NULL 상수)만을 가질 수 있는 특별한 타입, NULL 타입의 변수란 아직 어떠한 값도 대입되지 않은 변수를 의미 */

/*  타입 변환
    1. 자동 타입 변환 : 타입이 상황에 따라 자동으로 변환되는 것
    $var1 = "문자열"; // string
    $var2 = 10;       // int
    $var3 = 3.14;     // float

    var_dump($var1);
    var_dump($var2);
    var_dump($var3);

    2. 강제 타입 변환 : 사용자가 직접 데이터의 타입을 변환, 강제 타입 변환을 타입 캐스트 연산자인 괄호()를 사용
    $var_01 = 10;
    var_dump($var_01);           // int(10)  
    $var_02 = (boolean) $var_01;
    var_dump($var_02);           // bool(true)  */

// ------- 연산자 -------
// 1. 산술 연산자
// 1 + 1;
// 1 - 1;
// 1 * 1;
// 1 / 1;
// 1 % 1;

// 2. 산술 대입 연산자 +=, -=, *=, /= ...
// $num = 1;
// $num = $num + 2;
// $num += 2;
// echo $num;

// 3. 증가/증감 연산자 : 피연산자를 1씩 증가 혹은 감소시킬 때 사용
// 1++;
// 1--;
// $num = 1;
// echo $num++; : 해당 연산을 수행하고 나서 피연산자의 값을 1증가 시킴
// echo "\n";
// echo $num;
// echo ++$num; : 피연산자의 값을 1증가시킨 후에 해당 연산을 수행

// 4. 비교 연산자 : 피연산자 사이의 상대적인 크기를 판단하여, 참(true)과 거짓(false)을 반환
// $num_01 = 1;
// $num_02 = "1";
// var_dump($num_01 == $num_02);

// 1 == "1"; // 결과 true : 왼쪽과 오른쪽의 피연산자가 같으면 참
// 1 === "1"; // 결과 false : 왼쪽과 오른쪽의 피연산자가 같고 같은 타입이면 참 (PHP4에서 추가)
// 1 != "1" // 결과 false : 왼쪽과 오른쪽의 피연산자가 같지 않으면 참

// 5. 논리 연산자 : 논리식을 판단하여, 참(true)과 거짓(false)을 반환
// and : 논리식이 모두 참일 때 참
// or : 논리식 중에서 하나라도 참이면 참
// || : 논리식 중에서 하나라도 참이면 참(or연산)
// ! : 논리식의 결과가 참이면 거짓, 거짓이면 참(not연산)

// $num_01 = true;
// $num_02 = false;
// var_dump($num_01 and $num_02);      // true and false -> false
// var_dump($num_01 or $num_02);       // true or false -> true

// && || !
// $bool = true;
// if(!(!( 1 === 1 ))) {
// 	echo "참참참";
// }

// PHP에서 괄호의 의미
// () : 조건
// [] : 배열 생성할 때
// {} : 내가 처리하고 싶은 연산들(연산의 집합)
//  ; : 최소 연산 단위, 

// if( $조건 ) {
// 	    조건이 참일 때 처리할 내용
// }

// for( $시작값; $종료조건; $루프마다얼마증가 ) {
// 	    처리할 내용
// }

// **현업에서는 foreach와 while문 많이 사용
// while( $조건 ) {
// 	    처리할 내용
// }

// 배열(Array) 정리
// $arr = [1, 2, 3]; - 인덱스 배열
// $arr2 = [
// 	"key1" => "val1" - 연상 배열 **key는 항상 문자열로 적어야 함
// 	,"key2" => [
// 				 "key3" => "val3"
// 				,"key4" => "val4"
// 			]
// ];

// echo $arr[2]; // 3

// echo $arr2["key2"]["key4"]; // val4 **key값을 적어줘야 val값이 출력

// print_r($arr2["key2"]);
// var_dump($arr2["key2"]);
// foreach( $arr2["key"] as $val) { // 첫번째 배열이 각 key, val값 들어가서 처리가 되고 foreach문이니까 그다음 배열이 각 값에 들어가서 처리가 되는 것
//     echo $val, "\n";
// } // val3, val4

// foreach( $arr2["key2"] as $key => $val) {
// 	echo "{$key} : {$val}\n";
// }


// define("MSG", "에러가 발생했습니다. (CODE : %s)");
// $msg = sprintf(MSG, "E01");
// echo $msg;